-------------------------------------------------------------------------
-- Justin Templeton
-------------------------------------------------------------------------


-- alu.vhd
-------------------------------------------------------------------------
-- DESCRIPTION: This file represents a control block for a single cycle MIPS processor
--
--
-------------------------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;

entity alu is

  port(A            : in std_logic_vector(31 downto 0);     -- Instruction Input
       B            : in std_logic_vector(31 downto 0);     -- Value from Control Block (bits 31 to 26)
       ALUOp        : in std_logic_vector(12 downto 0);
       O 	    : out std_logic_vector(31 downto 0));     -- Signal sent to ALU
    

end alu;

architecture mixed of alu is



  component adder_N is
  generic(N : integer := 32); -- Generic of type integer for input/output data width. Default value is 32.
  port(i_C          : in std_logic;
       i_X1         : in std_logic_vector(N-1 downto 0);
       i_X2         : in std_logic_vector(N-1 downto 0);
       o_S          : out std_logic_vector(31 downto 0);
       o_C          : out std_logic);
  end component;

  component addsub_n is
  generic(N : integer := 32);
  port(nAdd_Sub    : in std_logic;
       i_A         : in std_logic_vector(N-1 downto 0);
       i_B         : in std_logic_vector(N-1 downto 0);
       o_S         : out std_logic_vector(N-1 downto 0);
       o_C         : out std_logic);
  end component;

  component and32 is
  port(i_1         : in std_logic_vector(31 downto 0);
       i_2         : in std_logic_vector(31 downto 0);
       o_And       : out std_logic_vector(31 downto 0));
  end component;

  component or32 is
  port(i_1         : in std_logic_vector(31 downto 0);
       i_2         : in std_logic_vector(31 downto 0);
       o_Or       : out std_logic_vector(31 downto 0));
  end component;

  component nor32 is
  port(i_1         : in std_logic_vector(31 downto 0);
       i_2         : in std_logic_vector(31 downto 0);
       o_Nor       : out std_logic_vector(31 downto 0));
  end component;

  component not32 is
  port(i_n         : in std_logic_vector(31 downto 0);
       o_Not       : out std_logic_vector(31 downto 0));
  end component;

  component xor32 is
  port(i_1         : in std_logic_vector(31 downto 0);
       i_2         : in std_logic_vector(31 downto 0);
       o_Xor       : out std_logic_vector(31 downto 0));
  end component;
  
  component barrelShift is 
  port(i_S	: in std_logic_vector(4 downto 0);	--Selects how much to shift
       i_Left   : in std_logic;				--0 for right, 1 for left
       i_Op	: in std_logic;				--0 for logical, 1 for arithmetic shifting
       i_In     : in std_logic_vector(31 downto 0);	--Value input before shifting
       o_Out    : out std_logic_vector(31 downto 0));	--Value output after shifting
  end component;



signal s_add, s_sub, s_sign, s_not, s_or, s_xor, s_nor, s_and, s_sll, s_srl, s_sra, s_lui, s_jump :  std_logic;	
signal s_nAdd_Sub, s_CarryOut, s_LeftorR, s_ShiftOp, s_ADDERCARRY, s_i_C, s_o_C, s_Zero, s_Overflow :  std_logic;	
signal s_ShiftSelect : std_logic_vector(4 downto 0);
signal s_ALUOP : std_logic_vector(12 downto 0);
signal shamt : std_logic_vector(4 downto 0);
signal s_o_S, s_X1, s_X2, s_Out, s_A, s_B : std_logic_vector(31 downto 0);
signal s_adder1, s_adder2, s_adderSum, s_ALU_OUT, s_AND1, s_AND2, s_AND_O, s_OR1, s_OR2, s_OR_O, s_XOR1, s_XOR2, s_XOR_O, s_NOR1, s_NOR2, s_NOR_O, s_NOT_I, s_NOT_O, s_Shift_I, s_Shift_O : std_logic_vector(31 downto 0);
begin

s_ALUOP <= ALUOP;  

s_add <= ALUOp(12);
s_sub <= ALUOp(11);
s_sign <= ALUOp(10);
s_not <= ALUOp(9);
s_or <= ALUOp(8);
s_xor <= ALUOp(7);
s_nor <= ALUOp(6);
s_and <= ALUOp(5);
s_sll <= ALUOp(4);
s_srl <= ALUOp(3);
s_sra <= ALUOp(2);
s_jump <= ALUOp(1);
s_lui <= ALUOp(0);  
shamt <= B(10 downto 6);
s_A <= A;
s_B <= B;

O <= s_Out;

ADD_1: adder_n
port MAP(i_C     => s_i_C,
       i_X1      => s_X1,
       i_X2      => s_X2,
       o_S       => s_o_S,
       o_C       => s_o_C);

ADD_2: addsub_n
port MAP(nAdd_Sub => s_nAdd_Sub,
       i_A  => s_adder1,
       i_B  => s_adder2,
       o_S   => s_adderSum,
       o_C   => s_CarryOut);
AND_1: and32
port MAP(i_1 => s_AND1,
       i_2   => s_AND2,
       o_And => s_AND_O);

OR_1: or32
port MAP(i_1 => s_OR1,
       i_2   => s_OR2,
       o_Or  => s_OR_O);

XOR_1: xor32
port MAP(i_1 => s_XOR1,
       i_2   => s_XOR2,
       o_Xor => s_XOR_O);

NOR_1: nor32
port MAP(i_1 => s_NOR1,
       i_2   => s_NOR2,
       o_Nor => s_NOR_O);

NOT_1: not32
port MAP(i_n => s_NOT_I,
       o_Not => s_NOT_O);
BS_1: barrelShift
port MAP(i_S  => s_ShiftSelect,	--Selects how much to shift
       i_Left => s_LeftorR,	--0 for right, 1 for left
       i_Op   => s_ShiftOp,		--0 for logical, 1 for arithmetic shifting
       i_In   => s_Shift_I,	--Value input before shifting
       o_Out  => s_Shift_O);	--Value output after shifting




r_IF_ALUOP1: process(s_ALUOP, s_A, s_B) is
begin 
     if s_ALUOP = b"0000000100000" then --and
          s_AND1 <= s_A;
          s_AND2 <= s_B;
          s_Out <= s_AND_O;
     elsif s_ALUOP = b"0000100000000" then --or
          s_OR1 <= s_A;
          s_OR2 <= s_B;
          s_Out <= s_OR_O;
     elsif s_ALUOP = b"0000010000000" then --xor
          s_XOR1 <= s_A;
          s_XOR2 <= s_B;
          s_Out <= s_XOR_O;   
     elsif s_ALUOP = b"0000001000000" then --nor
     	  s_NOR1 <= s_A;
	  s_NOR2 <= s_B;
          s_Out <= s_NOR_O;
     elsif s_ALUOP = b"1010000000000"  then --add
          s_nAdd_Sub <= '0';
          s_adder1 <= s_A;
          s_adder2 <= s_B;
          s_Out <= s_adderSum;
     elsif s_ALUOP = b"0100000000000"  then --sub
          s_nAdd_Sub <= '1';
          s_adder1 <= s_A;
          s_adder2 <= s_B;
          s_Out <= s_adderSum;
     elsif s_ALUOP = b"1000000000000"  then --addu
          s_i_C <= '0';
	  s_X1 <= s_A;
	  s_X2 <= s_B;
	  s_ADDERCARRY <= s_o_C;
	  s_Out <= s_o_S;
     elsif s_ALUOP = b"0000000010000"  then --sll
          s_ShiftSelect <= shamt;
	  s_LeftorR <= '0';
	  s_ShiftOp <= '0';
	  s_Shift_I <= s_A;
	  s_Out <= s_Shift_O;
     elsif s_ALUOP = b"0000000001000"  then --srl
          s_ShiftSelect <= shamt;
	  s_LeftorR <= '1';
	  s_ShiftOp <= '0';
	  s_Shift_I <= s_A;
	  s_Out <= s_Shift_O;
     elsif s_ALUOP = b"0000000000100"  then --sra
          s_ShiftSelect <= shamt;
	  s_LeftorR <= '1';
	  s_ShiftOp <= '1';
	  s_Shift_I <= s_A;
	  s_Out <= s_Shift_O;
     elsif s_ALUOP = b"0000000000001"  then --lui
          s_ShiftSelect <= b"10000";
	  s_LeftorR <= '1';
	  s_ShiftOp <= '0';
	  s_Shift_I <= s_B;
	  s_Out <= s_Shift_O;
     elsif s_ALUOP = b"0001000000000"  then --not
          s_NOT_I <= s_A;
          s_Out <= s_NOT_O;       
     end if;
end process r_IF_ALUOP1;

r_Zero: process(s_Out) is
begin 
	if s_Out = x"00000000" then
		s_Zero <= '1';
	else
		s_Zero <= '0';
	end if;
end process r_Zero;

r_Over: process(s_ALUOP, s_adderSum, s_AND_O, s_OR_O, s_XOR_O, s_NOR_O, s_NOT_O, s_o_S, s_Shift_O) is
begin 
	if s_CarryOut = '1' and s_adderSum(31) = '0'  then
		s_Overflow <= '1';
	elsif s_CarryOut = '0' and s_adderSum(31) = '1' then
		s_Overflow <= '1';
	else
		s_Overflow <= '0';
	end if;
	s_ADDERCARRY <= '0';
end process r_Over;

end mixed;